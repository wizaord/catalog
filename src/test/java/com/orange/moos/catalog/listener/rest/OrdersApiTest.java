package com.orange.moos.catalog.listener.rest;

import com.orange.moos.catalog.CatalogApplication;
import com.orange.moos.catalog.domain.DeliverOrders;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.embedded.LocalServerPort;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.util.UriComponentsBuilder;

import java.net.URI;
import java.time.LocalDateTime;

import static com.orange.moos.catalog.admin.E_PROFILES.Constants.AMQP;
import static com.orange.moos.catalog.admin.E_PROFILES.Constants.REST;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = CatalogApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles({REST, AMQP})
public class OrdersApiTest {

    @LocalServerPort
    private int port;


    @Autowired
    private TestRestTemplate template;

    /**
     * The URL joined by tests
     */
    private static final String DEFAULT_URL = "http://localhost:%d/orders/";

    /**
     * Build the API URI based on a iccid. The variable {@link #DEFAULT_URL} is used for the generation.
     * The returned URI is : {@value #DEFAULT_URL}
     * <ul>
     * <li>XXXXX : is the default port generated by Spring test</li>
     * </ul>
     *
     *
     * @return URI
     */
    private URI buildURI() {
        return UriComponentsBuilder.fromUriString(String.format(DEFAULT_URL, port)).build().toUri();
    }

    @Test
    public void reserveMsisdn_badTypeDossier_test() {

        final DeliverOrders deliverOrder = DeliverOrders.builder()
                .orderId("orderId")
                .receivedDate(LocalDateTime.now())
                .updatedDate(LocalDateTime.now()).build();
        HttpEntity<DeliverOrders> request = new HttpEntity<DeliverOrders>(deliverOrder);


        ResponseEntity<Void> response = template.postForEntity(buildURI(), request, Void.class);
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.ACCEPTED);
    }
}